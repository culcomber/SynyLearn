1. 列举你所了解的计算机存储设备类型？

   <img src="../assets/image-20230331150755594.png" alt="image-20230331150755594" style="zoom:70%;" />

   <img src="../assets/image-20230331150821534.png" alt="image-20230331150821534" style="zoom:80%;" />

2. 一般代码存储在计算机的哪个设备中？代码在 CPU 中是如何运行的？

   代码被编译成机器指令，当要运行代码时，从硬盘中读取代码到内存，cpu运行内存中的机器代码

   <img src="../assets/image-20230331161449286.png" alt="image-20230331161449286" style="zoom:80%;" />

3. 什么是指令和指令集？

   指令指CPU可以处理的命令，一般包括算术指令（加减运算）、逻辑指令（与或非）、数据指令（移动、加载、储存）

   指令集指指令的集合，汇编语言就是指令集

4. JavaScript 是如何运行的？

   <img src="../assets/image-20230331154003477.png" alt="image-20230331154003477" style="zoom:80%;" />

5. 解释型语言和编译型语言的差异是什么？

   编译器主要分为编译器前端，优化器和编译器后端。编译器的工作，就是将源码编译成机器码，然后将这些能在目标机器上执行的二进制代码文件，存入磁盘。需要用到的时候，再启动进程，加载二进制代码再执行。

   解释器一般将编译器和虚拟机整合在一起。解释器可以直接加载代码，在内部编译后直接执行，中间不会生成任何文件。解释器内部的编译器，一般只包含前端，也就是包含词法分析器和语法分析器，将源码编译成虚拟机指令（例如用c写的虚拟机，并自定义虚拟机指令），这样就可以在虚拟机里运行了。

   解释器使用`JIT`(just in time compiler)也会生成机器码

   <img src="../assets/image-20230403153139037.png" alt="image-20230403153139037" style="zoom:80%;" />

6. 简单描述一下 Babel 的编译过程？

   - 解析（Parse）：包括词法分析和语法分析。词法分析主要把字符流源代码（Char Stream）转换成令牌流（ Token Stream），语法分析主要是将令牌流转换成抽象语法树（Abstract Syntax Tree， `AST`）。
   - 转换（Transform）：通过 Babel 的插件能力，将高版本语法的  `AST`转换成支持低版本语法的  `AST`。当然在此过程中也可以对  `AST`的 Node 节点进行优化操作，比如添加、更新以及移除节点等。
   - 生成（Generate）：将 `AST` 转换成字符串形式的低版本代码，同时也能创建 Source Map 映射。

   <img src="../assets/image-20230403161712010.png" alt="image-20230403161712010" style="zoom:67%;" />

7. JavaScript 中的数组和函数在内存中是如何存储的？

   JavaScript 中的数组存储大致需要分为两种情况：

   - 同种类型数据的数组分配连续的内存空间
   - 存在非同种类型数据的数组使用哈希映射分配内存空间

   函数属于引用数据类型，存储在堆中，在栈内存中只是存了一个地址来表示对堆内存中的引用。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。在调用栈中调用函数。

   <img src="../assets/image-20230403162114101.png" alt="image-20230403162114101" style="zoom:80%;" />

8. 浏览器和 `Node.js` 中的事件循环机制有什么区别？

   todo [Tasks, microtasks, queues and schedules](https://link.juejin.cn/?target=https%3A%2F%2Fjakearchibald.com%2F2015%2Ftasks-microtasks-queues-and-schedules%2F)

   **宏任务**： script （主代码块）、`setTimeout` 、`setInterval` 、`setImmediate` 、I/O 、UI rendering

   **微任务**：`process.nextTick`（`Nodejs`） 、`promise` 、`Object.observe` 、`MutationObserver`

   - 执行一个**宏任务**（首次执行的主代码块或者**任务队列**中的回调函数）
   - 执行过程中如果遇到**微任务**，就将它添加到**微任务**的任务队列中
   - **宏任务**执行完毕后，立即执行当前**微任务**队列中的所有任务（依次执行）
   - **JS引擎线程**挂起，**GUI线程**执行渲染
   - **GUI线程**渲染完毕后挂起，**JS引擎线程**执行**任务队列**中的下一个**宏任务**

9. `ES6` Modules 相对于 `CommonJS` 的优势是什么？

   todo https://juejin.cn/post/6996815121855021087#heading-6

   | 类型       | ES Module   | CommonJS                         |
   | ---------- | ----------- | -------------------------------- |
   | 加载方式   | 编译时      | 运行时                           |
   | 引入性质   | 引用 / 只读 | 浅拷贝 / 可读写                  |
   | 模块作用域 | this        | this / __filename / __dirname... |

10. 高级程序设计语言是如何编译成机器语言的？

11. 编译器一般由哪几个阶段组成？数据类型检查一般在什么阶段进行？

12. 编译过程中虚拟机的作用是什么？

13. 什么是中间代码（IR），它的作用是什么？

14. 什么是交叉编译？

15. 发布 / 订阅模式和观察者模式的区别是什么？

    <img src="../assets/image-20230403193932064.png" alt="image-20230403193932064" style="zoom:50%;" />

    <img src="../assets/image-20230403193954940.png" alt="image-20230403193954940" style="zoom:50%;" />

    

16. 装饰器模式一般会在什么场合使用？

    

17. 谈谈你对大型项目的代码解耦设计理解？什么是 Ioc？一般 DI 采用什么设计模式实现？

18. 列举你所了解的编程范式？

19. 什么是面向切面（`AOP`）的编程？

20. 什么是函数式编程？什么是响应式编程？什么是函数响应式编程？

21. 响应式编程或者函数响应式编程的使用场景有哪些？

