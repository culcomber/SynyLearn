1、`addEventListener`

`document.addEventListener(*event*, *function*, *useCapture*)`

| 参数         | 描述                                                         |
| :----------- | :----------------------------------------------------------- |
| *event*      | 必需。描述事件名称的字符串。 [HTML DOM Event 对象参考手册](https://www.runoob.com/jsref/dom-obj-event.html)。 |
| *function*   | 必需。描述了事件触发后执行的函数。  当事件触发时，**事件对象**会作为第一个参数传入函数。 事件对象的类型取决于特定的事件。例如， "click" 事件属于 `MouseEvent`(鼠标事件) 对象。 |
| `useCapture` | 可选。布尔值，指定事件是否 在捕获或冒泡阶段执行。  可能值：true - 事件句柄在捕获阶段执行false- 默认。事件句柄在冒泡阶段执行 |

2、`classList `

返回元素的类名，作为 `DOMTokenList` 对象。该属性用于在元素中添加，移除及切换 `CSS` 类。

`classList` 属性是只读的，但你可以使用 `add()` 和 `remove()` 方法修改它。

Properties

| 属性   | Description                          |
| :----- | :----------------------------------- |
| length | 返回类列表中类的数量  该属性是只读的 |

方法

| 方法                          | 描述                                                         |
| :---------------------------- | :----------------------------------------------------------- |
| `add(class1, class2, ...)`    | 在元素中添加一个或多个类名。  如果指定的类名已存在，则不会添加 |
| contains(*class*)             | 返回布尔值，判断指定的类名是否存在。可能值：true - 元素包已经包含了该类名false - 元素中不存在该类名 |
| item(*index*)                 | 返回元素中索引值对应的类名。索引值从 0 开始。  如果索引值在区间范围外则返回 *null* |
| `remove(class1, class2, ...)` | 移除元素中一个或多个类名。  **注意：** 移除不存在的类名，不会报错。 |
| toggle(*class,* true\|false)  | 在元素中切换类名。  第一个参数为要在元素中移除的类名，并返回 false。 如果该类名不存在则会在元素中添加类名，并返回 true。  第二个是可选参数，是个布尔值用于设置元素是否强制添加或移除类，不管该类名是否存在。例如：  移除一个 `class: element.classList.toggle("classToRemove", false);` 添加一个 `class: element.classList.toggle("classToAdd", true);`  **注意：** Internet Explorer 或 Opera 12 及其更早版本不支持第二个参数。 |

3、请求

Ajax：`Asynchronous JavaScript + XML` ，异步JavaScript和XML。Ajax 是一个**概念模型**，是一个囊括了众多现有技术的**集合**，并不具体代指某项技术。最重要的特性就是可以**局部刷新页面**。

`Axios` ：基于 Promise 网络请求库，作用于 `Node.js` 和浏览器中。在服务端它使用原生 `Node.js http` 模块，而在客户端则使用 `XMLHttpRequest`。

Fetch：提供了许多与 `XMLHttpRequest` 相同的功能，但被设计成**更具可扩展性和高效性**。

<img src="../assets/image-20230220221259343.png" alt="image-20230220221259343" style="zoom:45%;" />

- Ajax 是一种代表异步 JavaScript + XML 的模型（技术合集），所以 Fetch 也是 Ajax 的一个子集

- 在之前，我们常说的 Ajax 默认是指以 `XHR` 为核心的技术合集，而在有了 Fetch 之后，Ajax 不再单单指 `XHR` 了，我们将以 `XHR `为核心的 Ajax 技术称作**传统 Ajax**。

- `Axios` 属于传统 Ajax（`XHR`）的子集，因为它是基于 `XHR` 进行的封装。

4、跨域

`JSONP`