// https://zhuanlan.zhihu.com/p/145210784
{
    "compilerOptions": { // 属性被忽略，则编译器会使用默认值
        "allowSyntheticDefaultImports": true,
        "outDir": "./dist/", // 指定输出目录
        "sourceMap": true, // 生成目标文件的sourceMap文件
        "noImplicitAny": false, // 不允许隐式的any类型
        "preserveConstEnums": true, // 保留 const 和 enum 声明
        "incremental": true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
        "tsBuildInfoFile": "./buildFile", // 增量编译文件的存储位置
        "diagnostics": false, // 打印诊断信息
        "target": "es5", // 目标语言的版本
        "module": "commonjs", // 生成代码的模板标准
        "jsx": "react",
        "allowJs": true, // 允许编译器编译JS，JSX文件
        "lib": ["es5", "dom", "ES2015"], // TS需要引用的库
        "outFile": "./app.js", // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD",
        "checkJs": true, // 允许在JS文件中报错，通常与allowJS一起使用
        "rootDir": "./", // 指定输出文件目录(用于输出)，用于控制输出目录结构
        "declaration": true, // 生成声明文件，开启后会自动生成声明文件
        "declarationDir": "./file", // 指定生成声明文件存放目录
        "emitDeclarationOnly": true, // 只生成声明文件，而不会生成js文件
        "inlineSourceMap": true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中
        "declarationMap": true, // 为声明文件生成sourceMap
        "typeRoots": [], // 声明文件目录，默认时node_modules/@types
        "types": [], // 加载的声明文件包
        "removeComments":true, // 删除注释
        "noEmit": true, // 不输出文件,即编译后不会生成任何js文件
        "noEmitOnError": true, // 发送错误时不输出任何文件
        "noEmitHelpers": true, // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用
        "importHelpers": true, // 通过tslib引入helper函数，文件必须是模块
        "downlevelIteration": true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
        "strict": false, // 开启所有严格的类型检查
        "alwaysStrict": false, // 在代码中注入'use strict'
        "strictNullChecks": false, // 不允许把null、undefined赋值给其他类型的变量
        "strictFunctionTypes": true, // 不允许函数参数双向协变
        "strictPropertyInitialization": true, // 类的实例属性必须初始化
        "strictBindCallApply": true, // 严格的bind/call/apply检查
        "noImplicitThis": false, // 不允许this有隐式的any类型
        "noUnusedLocals": false, // 检查只声明、未使用的局部变量(只提示不报错)
        "noUnusedParameters": false, // 检查未使用的函数参数(只提示不报错)
        "noFallthroughCasesInSwitch": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)
        "noImplicitReturns": true, //每个分支都会有返回值
        "esModuleInterop": true, // 允许export=导出，由import from 导入
        "allowUmdGlobalAccess": true, // 允许在模块中全局变量的方式访问umd模块
        "moduleResolution": "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
        "baseUrl": "./", // 解析非相对模块的基地址，默认是当前目录
        "paths": { // 路径映射，相对于baseUrl
            // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置
            "jquery": ["node_modules/jquery/dist/jquery.min.js"]
        },
        "rootDirs": ["src","out"],
        // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，
        // 这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
        "listEmittedFiles": false, // 打印输出文件
        "listFiles": false // 打印编译的文件(包括引用的声明文件)
    },
    "exclude": [ // 排除src目录下的lib文件夹下的文件不会编译
        "node_modules"
    ],
    /*"files": [   // 指定需要编译的单个文件列表
        "./src/index.ts" // 编译器会自动将所有的依赖文件归纳为编译对象
    ],*/
     //"include": [ // 指定编译需要编译的文件或目录
         //"scr", // 会编译src目录下的所有文件，包括子目录
         // "scr/*", // 只会编译scr一级目录下的文件
         // "scr/*/*", // 只会编译scr二级目录下的文件
     //],
    // "compileOnSave": false, // 设置保存文件的时候自动编译，但需要编译器支持
    // "extends": "./tsconfig.base.json", // 把基础配置抽离成tsconfig.base.json文件，然后引入
    /*"references": [ // 指定依赖的工程
        {"path": "./common"}
    ]*/
    /*"typeAcquisition": { // 设置自动引入库类型定义文件(.d.ts)相关
        "enable": false, // 布尔类型，是否开启自动引入库类型定义文件(.d.ts)，默认为 false
        "exclude": ["jquery"], // 数组类型，允许自动引入的库名，如：["jquery", "lodash"]
        "include": ["jest"], // 数组类型，排除的库名
    }*/
}